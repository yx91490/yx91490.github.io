(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{602:function(a,t,e){"use strict";e.r(t);var r=e(10),s=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"docker笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker笔记"}},[a._v("$")]),a._v(" Docker笔记")]),a._v(" "),t("p",[a._v("本文档基于"),t("code",[a._v("18.09.2")]),a._v("版本的docker。")]),a._v(" "),t("h2",{attrs:{id:"docker命令行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker命令行"}},[a._v("$")]),a._v(" Docker命令行")]),a._v(" "),t("h3",{attrs:{id:"镜像管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像管理"}},[a._v("$")]),a._v(" 镜像管理")]),a._v(" "),t("h4",{attrs:{id:"docker-pull"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-pull"}},[a._v("$")]),a._v(" docker pull")]),a._v(" "),t("p",[a._v("从镜像仓库中拉取或者更新指定镜像：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker pull [OPTIONS] NAME[:TAG|@DIGEST]\n")])])]),t("p",[a._v("如果速度较慢，可以配置镜像库：")]),a._v(" "),t("p",[a._v("编辑文件"),t("code",[a._v("/etc/docker/daemon.json")]),a._v("：")]),a._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token property"}},[a._v('"registry-mirrors"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://registry.docker-cn.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),t("p",[a._v("之后重新启动服务：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" systemctl daemon-reload\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" systemctl restart "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v("\n")])])]),t("h4",{attrs:{id:"docker-images"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-images"}},[a._v("$")]),a._v(" docker images")]),a._v(" "),t("p",[a._v("列出本地镜像：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker images [OPTIONS] [REPOSITORY[:TAG]]\n")])])]),t("h4",{attrs:{id:"docker-rmi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-rmi"}},[a._v("$")]),a._v(" docker rmi")]),a._v(" "),t("p",[a._v("删除本地一个或多少镜像：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker rmi [OPTIONS] IMAGE [IMAGE...]\n")])])]),t("h4",{attrs:{id:"docker-tag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-tag"}},[a._v("$")]),a._v(" docker tag")]),a._v(" "),t("p",[a._v("给本地镜像打上一个标签：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]\n")])])]),t("h4",{attrs:{id:"docker-build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-build"}},[a._v("$")]),a._v(" docker build")]),a._v(" "),t("p",[a._v("使用 Dockerfile 创建镜像：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker build [OPTIONS] PATH | URL | -\n")])])]),t("h4",{attrs:{id:"docker-history"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-history"}},[a._v("$")]),a._v(" docker history")]),a._v(" "),t("p",[a._v("查看指定镜像的创建历史：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker history [OPTIONS] IMAGE\n")])])]),t("h4",{attrs:{id:"docker-export"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-export"}},[a._v("$")]),a._v(" docker export")]),a._v(" "),t("p",[a._v("将"),t("strong",[a._v("容器")]),a._v("导出为tar归档文件：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker export [OPTIONS] CONTAINER\nOPTIONS：\n    -o 写入文件，而不是标准输出\n")])])]),t("h4",{attrs:{id:"docker-import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-import"}},[a._v("$")]),a._v(" docker import")]),a._v(" "),t("p",[a._v("将"),t("code",[a._v("docker export")]),a._v("导出的tar文件导入为镜像：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]\n")])])]),t("h4",{attrs:{id:"docker-save"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-save"}},[a._v("$")]),a._v(" docker save")]),a._v(" "),t("p",[a._v("将指定"),t("strong",[a._v("镜像")]),a._v("保存成 tar 归档文件：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker save [OPTIONS] IMAGE [IMAGE...]\nOptions：\n    -o 写入文件，而不是标准输出\n")])])]),t("h4",{attrs:{id:"docker-load"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-load"}},[a._v("$")]),a._v(" docker load")]),a._v(" "),t("p",[a._v("导入使用 "),t("code",[a._v("docker save")]),a._v(" 命令导出的镜像：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker load [OPTIONS]\nOptions:\n    -i 从归档文件读入，而不是标准输入\n")])])]),t("h3",{attrs:{id:"容器管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器管理"}},[a._v("$")]),a._v(" 容器管理")]),a._v(" "),t("h4",{attrs:{id:"docker-run"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-run"}},[a._v("$")]),a._v(" docker run")]),a._v(" "),t("p",[a._v("创建一个新的容器并运行一个命令：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n")])])]),t("h4",{attrs:{id:"docker-exec"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-exec"}},[a._v("$")]),a._v(" docker exec")]),a._v(" "),t("p",[a._v("在运行的容器中执行命令：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\nOptions:\n  -d, --detach               在后台运行命令\n  -i, --interactive          以交互模式运行容器\n  -t, --tty                  分配一个伪终端\n")])])]),t("h4",{attrs:{id:"docker-ps"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-ps"}},[a._v("$")]),a._v(" docker ps")]),a._v(" "),t("p",[a._v("列出容器：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker ps [OPTIONS]\n    -a :显示所有的容器，包括未运行的。\n")])])]),t("h4",{attrs:{id:"docker-top"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-top"}},[a._v("$")]),a._v(" docker top")]),a._v(" "),t("p",[a._v("查看容器中运行的进程信息，支持 ps 命令参数：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker top [OPTIONS] CONTAINER [ps OPTIONS]\n")])])]),t("h4",{attrs:{id:"docker-logs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-logs"}},[a._v("$")]),a._v(" docker logs")]),a._v(" "),t("p",[a._v("获取容器的日志：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('docker logs [OPTIONS] CONTAINER\nOptions:\n  -f, --follow         跟踪日志输出\n      --since string   显示从某时间戳之后的日志 (例如 2013-01-02T13:23:37) 或者相对时间 (例如 42m 从42分钟前开始)\n      --tail string    Number of lines to show from the end of the logs (default "all")\n  -t, --timestamps     显示时间戳\n      --until string   显示到某时间戳之前的日志 (例如 2013-01-02T13:23:37) 或者相对时间 (例如  42m 到42分钟前截止)\n')])])]),t("h4",{attrs:{id:"docker-start-stop-restart"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-start-stop-restart"}},[a._v("$")]),a._v(" docker start/stop/restart")]),a._v(" "),t("p",[t("strong",[a._v("docker start")]),a._v(" :启动一个或多个已经被停止的容器")]),a._v(" "),t("p",[t("strong",[a._v("docker stop")]),a._v(" :停止一个运行中的容器")]),a._v(" "),t("p",[t("strong",[a._v("docker restart")]),a._v(" :重启容器")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker start   [OPTIONS] CONTAINER [CONTAINER...]\ndocker stop    [OPTIONS] CONTAINER [CONTAINER...]\ndocker restart [OPTIONS] CONTAINER [CONTAINER...]\n")])])]),t("h4",{attrs:{id:"docker-kill"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-kill"}},[a._v("$")]),a._v(" docker kill")]),a._v(" "),t("p",[a._v("杀掉一个运行中的容器：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker kill [OPTIONS] CONTAINER [CONTAINER...]\n")])])]),t("h4",{attrs:{id:"docker-rm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-rm"}},[a._v("$")]),a._v(" docker rm")]),a._v(" "),t("p",[a._v("删除一个或多个容器：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker rm [OPTIONS] CONTAINER [CONTAINER...]\n")])])]),t("h3",{attrs:{id:"容器rootfs命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器rootfs命令"}},[a._v("$")]),a._v(" 容器rootfs命令")]),a._v(" "),t("h4",{attrs:{id:"docker-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-commit"}},[a._v("$")]),a._v(" docker commit")]),a._v(" "),t("p",[a._v("从容器创建一个新的镜像：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]\n")])])]),t("h4",{attrs:{id:"docker-cp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-cp"}},[a._v("$")]),a._v(" docker cp")]),a._v(" "),t("p",[a._v("在容器和本地文件系统之间拷贝文件和文件夹：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-\ndocker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH\n")])])]),t("h4",{attrs:{id:"docker-diff"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-diff"}},[a._v("$")]),a._v(" docker diff")]),a._v(" "),t("p",[a._v("检查容器里文件结构的更改：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker diff [OPTIONS] CONTAINER\n")])])]),t("h3",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("$")]),a._v(" 参考")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.runoob.com/docker/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker 教程"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://docs.docker.com/config/containers/resource_constraints/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Runtime options with Memory, CPUs, and GPUs"),t("OutboundLink")],1)])]),a._v(" "),t("h2",{attrs:{id:"dockerfile配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile配置"}},[a._v("$")]),a._v(" Dockerfile配置")]),a._v(" "),t("h3",{attrs:{id:"from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[a._v("$")]),a._v(" FROM")]),a._v(" "),t("p",[a._v("指定从哪个基础镜像开始构建：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("FROM [--platform=<platform>] <image>[:<tag>] [AS <name>]\n")])])]),t("h3",{attrs:{id:"env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[a._v("$")]),a._v(" ENV")]),a._v(" "),t("p",[a._v("设置环境变量：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("ENV <key>=<value> <key>=<value> <key>=<value> ...\n")])])]),t("ul",[t("li",[a._v("可以指定多个")]),a._v(" "),t("li",[a._v("对所有用户有效")]),a._v(" "),t("li",[a._v("使用"),t("code",[a._v("su")]),a._v("切换用户后失效")]),a._v(" "),t("li",[a._v("从构建过程到最终镜像都可见")])]),a._v(" "),t("p",[a._v("参考："),t("a",{attrs:{href:"https://stackoverflow.com/questions/32574429/dockerfile-create-env-variable-that-a-user-can-see",target:"_blank",rel:"noopener noreferrer"}},[a._v("Dockerfile: create ENV variable that a USER can see?"),t("OutboundLink")],1)]),a._v(" "),t("h3",{attrs:{id:"copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[a._v("$")]),a._v(" COPY")]),a._v(" "),t("p",[a._v("向容器中拷贝文件和文件夹：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("COPY [--chown=<user>:<group>] <src>... <dest>\n")])])]),t("p",[a._v("<dest>是绝对路径，或者相对"),t("code",[a._v("WORKDIR")]),a._v("的相对路径。")]),a._v(" "),t("h3",{attrs:{id:"run"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[a._v("$")]),a._v(" RUN")]),a._v(" "),t("p",[a._v("在build阶段执行，在新的layer上执行命令：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("RUN <command>\n")])])]),t("h3",{attrs:{id:"cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[a._v("$")]),a._v(" CMD")]),a._v(" "),t("p",[a._v("为容器指定默认启动命令：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('CMD ["executable","param1","param2"]\n')])])]),t("p",[a._v("或者作为ENTRYPOINT的参数：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('CMD ["param1","param2"]\n')])])]),t("blockquote",[t("p",[a._v("注意：")]),a._v(" "),t("p",[a._v("Docker容器中的应用都应该以前台执行，对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。")])]),a._v(" "),t("h3",{attrs:{id:"entrypoint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[a._v("$")]),a._v(" ENTRYPOINT")]),a._v(" "),t("p",[a._v("配置容器为可执行的：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('ENTRYPOINT ["executable", "param1", "param2"]\n')])])]),t("h3",{attrs:{id:"volume"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[a._v("$")]),a._v(" VOLUME")]),a._v(" "),t("p",[a._v("创建挂载点：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('VOLUME ["/data"]\n')])])]),t("h3",{attrs:{id:"设置时区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置时区"}},[a._v("$")]),a._v(" 设置时区")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n# 或者:\n# RUN timedatectl set-timezone Asia/Shanghai\n")])])]),t("h3",{attrs:{id:"中文乱码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中文乱码"}},[a._v("$")]),a._v(" 中文乱码")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("RUN localedef "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-c")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-f")]),a._v(" UTF-8 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-i")]),a._v(" zh_CN zh_CN.utf8\nENV "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("LANG")]),a._v(" zh_CN.UTF-8\n")])])]),t("p",[a._v("或者：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("localectl set-locale "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("LANG")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("zh_CN.UTF-8\n")])])]),t("h3",{attrs:{id:"参考-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考-2"}},[a._v("$")]),a._v(" 参考")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Dockerfile reference"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://stackoverflow.com/questions/26504846/copy-directory-to-other-directory-at-docker-using-add-command",target:"_blank",rel:"noopener noreferrer"}},[a._v("Copy directory to other directory at Docker using ADD command"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://wiki.archlinux.org/index.php/System_time_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E6%97%B6%E5%8C%BA",target:"_blank",rel:"noopener noreferrer"}},[a._v("System time (简体中文)"),t("OutboundLink")],1)])]),a._v(" "),t("h2",{attrs:{id:"docker-compose配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose配置"}},[a._v("$")]),a._v(" Docker-Compose配置")]),a._v(" "),t("p",[a._v("//TODO")]),a._v(" "),t("h2",{attrs:{id:"最佳实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[a._v("$")]),a._v(" 最佳实践")]),a._v(" "),t("h3",{attrs:{id:"通用建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通用建议"}},[a._v("$")]),a._v(" 通用建议")]),a._v(" "),t("p",[a._v("使用多阶段 build")]),a._v(" "),t("p",[a._v("不安装不必要的包")]),a._v(" "),t("p",[a._v("解耦应用：将每个容器限制为一个进程。")]),a._v(" "),t("p",[a._v("最小化layer 数")]),a._v(" "),t("p",[a._v("将多行的参数排序")]),a._v(" "),t("p",[a._v("利用缓存：")]),a._v(" "),t("ul",[t("li",[a._v("从缓存中已经存在的父映像开始，将下一条指令与从该基本映像派生的所有子映像进行比较，以查看其中是否有一个子映像是使用完全相同的指令构建的。")]),a._v(" "),t("li",[a._v("ADD和COPY指令比较的是 checksum 而非修改时间。")]),a._v(" "),t("li",[a._v("除了ADD和COPY，其他指令比较的是指令字符串。")])]),a._v(" "),t("h3",{attrs:{id:"dockerfile-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-指令"}},[a._v("$")]),a._v(" Dockerfile 指令")]),a._v(" "),t("h4",{attrs:{id:"from-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-2"}},[a._v("$")]),a._v(" FROM")]),a._v(" "),t("p",[a._v("使用Alpine image基础镜像。")]),a._v(" "),t("h4",{attrs:{id:"run-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-2"}},[a._v("$")]),a._v(" RUN")]),a._v(" "),t("p",[t("code",[a._v("apt-get update")]),a._v(" 和 "),t("code",[a._v("apt-get install")]),a._v(" 总是一块使用。")]),a._v(" "),t("h4",{attrs:{id:"add-or-copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-or-copy"}},[a._v("$")]),a._v(" ADD or COPY")]),a._v(" "),t("p",[a._v("COPY优先于 ADD，COPY 指令更透明。")]),a._v(" "),t("p",[a._v("ADD 指令最佳用法：用于本地的tar 自动解压到 image 里。")]),a._v(" "),t("h4",{attrs:{id:"user"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#user"}},[a._v("$")]),a._v(" USER")]),a._v(" "),t("p",[a._v("创建用户例子：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("RUN groupadd -r postgres && useradd --no-log-init -r -g postgres postgres\n")])])]),t("h4",{attrs:{id:"workdir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[a._v("$")]),a._v(" WORKDIR")]),a._v(" "),t("p",[a._v("为了可读性和准确性使用绝对路径。")]),a._v(" "),t("h3",{attrs:{id:"参考-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考-3"}},[a._v("$")]),a._v(" 参考")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Best practices for writing Dockerfiles"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"网络模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络模式"}},[a._v("$")]),a._v(" 网络模式")]),a._v(" "),t("p",[a._v("docker 提供给了4种网络模式：bridge（默认），none，host和自定义网络。")]),a._v(" "),t("p",[a._v("当我们完成docker engine的安装以后会生成3种网络：bridge，none和host。")]),a._v(" "),t("p",[a._v("docker允许我们创建3种类型的自定义网络，bridge，overlay，MACVLAN 。")]),a._v(" "),t("h4",{attrs:{id:"host网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#host网络"}},[a._v("$")]),a._v(" Host网络")]),a._v(" "),t("p",[a._v("docker build时使用host网络的方法：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" build "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--network")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("host "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("test")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),t("p",[a._v("docker-compose时使用host网络的方法：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v("version: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'3.4'")]),a._v("\nservices:\n    zlggateway:\n    build:\n        context: gateway\n        network: "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("host")]),a._v("\n    ports:\n      - "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"80:80"')]),a._v("\n      - "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"443:443"')]),a._v("\n")])])]),t("p",[a._v("docker run 时使用host网络的方法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("docker run --network=host  -i -t ubuntu:latest /bin/bash\n")])])]),t("p",[a._v("注意：")]),a._v(" "),t("blockquote",[t("p",[a._v("docker run 使用的网络和docker build时使用网络，是两个独立的网络")]),a._v(" "),t("p",[a._v("docker-compose.yml中的network_mode、networks都不是build时的网络环境")])]),a._v(" "),t("p",[a._v("参考：")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/atuotuo/p/6926390.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("docker - 关于network的一些理解"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://docs.docker.com/config/containers/container-networking/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Container networking"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.debugself.com/2018/01/17/docker_network/",target:"_blank",rel:"noopener noreferrer"}},[a._v("docker build以及docker run时使用host网络的方法"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"一些tricky技巧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一些tricky技巧"}},[a._v("$")]),a._v(" 一些tricky技巧")]),a._v(" "),t("p",[a._v("1.如果配置的网络模式是默认的bridge模式，通常会选择暴露若干个服务的端口，但是容器创建以后有时想另外暴露几个端口，如何在不删除容器的情况下更改暴露的端口？")]),a._v(" "),t("p",[a._v("方式一：")]),a._v(" "),t("p",[a._v("可以在停止docker服务后修改"),t("code",[a._v("/var/lib/container/<containerId>/hostconfig.json")]),a._v("，以及"),t("code",[a._v("/var/lib/container/<containerId>/config.v2.json")]),a._v("这两个文件。")]),a._v(" "),t("p",[a._v("方式二：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("HostIP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".1.1\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("HostPort")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30000")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("ContainerIP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.17")]),a._v(".0.2\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("ContainerPort")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30000")]),a._v("\niptables "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" nat "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-A")]),a._v(" PREROUTING "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" tcp "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" tcp "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--dport")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${HostPort}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-j")]),a._v(" DNAT --to-destination "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${ContainerIP}")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${ContainerPort}")]),a._v("\niptables "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" nat "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-A")]),a._v(" POSTROUTING "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${ContainerIP}")]),a._v("/32 "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" tcp "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" tcp "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--sport")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-j")]),a._v(" SNAT --to-source "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${HostIP}")]),a._v("\niptables "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-t")]),a._v(" filter "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-A")]),a._v(" INPUT "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-p")]),a._v(" tcp "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" state "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--state")]),a._v(" NEW "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-m")]),a._v(" tcp "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--dport")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${HostPort}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-j")]),a._v(" ACCEPT\n")])])]),t("p",[a._v("2.我们知道对容器中的hosts文件修改重启之后会失效，如何更改hosts使之不失效？")]),a._v(" "),t("p",[a._v("停止docker服务后修改"),t("code",[a._v("/var/lib/container/<containerId>/hosts")]),a._v("文件。")]),a._v(" "),t("p",[a._v("3.容器中的dubbo服务如何暴露容器而非宿主的ip？")]),a._v(" "),t("p",[a._v("指定配置参数："),t("code",[a._v("dubbo.protocol.host")]),a._v("为容器的ip。")]),a._v(" "),t("p",[a._v("4.如何在容器中使用dmidecode?")]),a._v(" "),t("p",[t("code",[a._v("docker run")]),a._v("命令：")]),a._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--device")]),a._v(" /dev/mem:/dev/mem --cap-add sys_rawio "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--rm")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" centos "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n")])])]),t("p",[a._v("或者"),t("code",[a._v("docker-compose")]),a._v("配置文件：")]),a._v(" "),t("div",{staticClass:"language-yml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-yml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("services")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("service1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("devices")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/dev/mem:/dev/mem"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("cap_add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" sys_rawio\n")])])]),t("p",[a._v("5.MySQL镜像如何初始化数据库？")]),a._v(" "),t("p",[a._v("当Mysql容器首次启动时，会在"),t("code",[a._v("/docker-entrypoint-initdb.d")]),a._v("目录下扫描"),t("code",[a._v(".sh，.sql，.sql.gz")]),a._v("类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库。这些文件会按照字母的顺序执行。")]),a._v(" "),t("h3",{attrs:{id:"参考-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考-4"}},[a._v("$")]),a._v(" 参考")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://blog.csdn.net/londa/article/details/92064142",target:"_blank",rel:"noopener noreferrer"}},[a._v("修改运行中的docker容器的端口映射"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/wesleyflagon/article/details/78961990",target:"_blank",rel:"noopener noreferrer"}},[a._v("修改docker容器端口映射的方法"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/69fb93c09817",target:"_blank",rel:"noopener noreferrer"}},[a._v("容器跨区双向调用的域名注册方案实现"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/da0fda84953f",target:"_blank",rel:"noopener noreferrer"}},[a._v("Dubbo跨区访问注册IP异常的解决方案"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/leecho571/article/details/81199067",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker部署Dubbo跨主机IP访问解决方案"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://stackoverflow.com/questions/38532483/where-is-var-lib-docker-on-mac-os-x",target:"_blank",rel:"noopener noreferrer"}},[a._v("Where is /var/lib/docker on Mac/OS X"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/sisimi/p/7693226.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("centos7 中文乱码解决方法"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://forums.docker.com/t/dev-mem-no-such-file-or-directory-in-ubuntu-linux-14-04-container/28403/6",target:"_blank",rel:"noopener noreferrer"}},[a._v("/dev/mem no such file or directory in Ubuntu Linux 14.04 container"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker —— 从入门到实践"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/felordcn/p/12970489.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker容器启动时初始化Mysql数据库"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);