(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{522:function(a,t,n){"use strict";n.r(t);var s=n(18),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"c语言指针与数组名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#c语言指针与数组名"}},[a._v("$")]),a._v(" C语言指针与数组名")]),a._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"http://c.biancheng.net/cpp/html/492.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://c.biancheng.net/cpp/html/492.html"),t("OutboundLink")],1)])]),a._v(" "),t("h1",{attrs:{id:"一、通过数组名访问数组元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、通过数组名访问数组元素"}},[a._v("$")]),a._v(" 一、通过数组名访问数组元素")]),a._v(" "),t("p",[a._v("看下面代码：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('int i, a[] = {3,4,5,6,7,3,7,4,4,6};\nfor (i = 0; i <= 9; i++)\n{\n   printf("%d\\n", a[i]);\n}\n')])])]),t("p",[a._v("很显然，它是显示 a 数组的各元素值。我们还可以这样访问元素，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('int i, a[] = {3,4,5,6,7,3,7,4,4,6};\nfor (i = 0; i <= 9; i++)\n{\n   printf("%d\\n", *(a+i));\n}\n')])])]),t("p",[a._v("它的结果和作用完全一样。")]),a._v(" "),t("h1",{attrs:{id:"二、通过指针访问数组元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、通过指针访问数组元素"}},[a._v("$")]),a._v(" 二、通过指针访问数组元素")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('int i, *pa, a[] = {3,4,5,6,7,3,7,4,4,6};\npa = a; /*请注意数组名a直接赋值给指针pa*/\nfor (i = 0; i <= 9; i++)\n{\n   printf("%d\\n", pa[i]);\n}\n1234567\n')])])]),t("p",[a._v("很显然，它也是显示 a 数组的各元素值。另外与数组名一样也可如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('int i, *pa, a[] = {3,4,5,6,7,3,7,4,4,6};\npa = a;\nfor (i = 0; i <= 9; i++)\n{\n   printf("%d\\n", *(pa+i));\n}\n')])])]),t("p",[a._v("看"),t("code",[a._v("pa = a")]),a._v("，即数组名赋值给指针，以及通过数组名、指针对元素的访问形式看，它们并没有什么区别，从这里可以看出：数组名其实也就是指针。难道它们没有任何区别？有，请继续。")]),a._v(" "),t("h1",{attrs:{id:"三、数组名与指针变量的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、数组名与指针变量的区别"}},[a._v("$")]),a._v(" 三、数组名与指针变量的区别")]),a._v(" "),t("p",[a._v("请看下面的代码：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('int i, *pa, a[] = {3,4,5,6,7,3,7,4,4,6};\npa = a;\nfor (i = 0; i <= 9; i++)\n{\n   printf("%d\\n", *pa);\n   pa++; /*注意这里，指针值被修改*/\n}\n')])])]),t("p",[a._v("可以看出，这段代码也是将数组各元素值输出。不过，你把循环体{}中的pa改成a试试。你会发现程序编译出错，不能成功。看来指针和数组名还是不同的。其实上面的指针是指针变量，而数组名只是一个指针常量。这个代码与上面的代码不同的是，指针pa在整个循环中，其值是不断递增的，即指针值被修改了。数组名是指针常量，其值是不能修改的，因此不能类似这样操作："),t("code",[a._v("a++")]),a._v("。")]),a._v(" "),t("p",[a._v("前面4、5节中pa[i]，*(pa+i)处，指针pa的值是使终没有改变。所以变量指针pa与数组名a可以互换。")]),a._v(" "),t("h1",{attrs:{id:"四、声明指针常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、声明指针常量"}},[a._v("$")]),a._v(" 四、声明指针常量")]),a._v(" "),t("p",[a._v("再请看下面的代码：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('int i, a[] = {3,4,5,6,7,3,7,4,4,6};\nint *const pa = a; /* 注意const的位置：不是const int *pa */\nfor (i = 0; i <= 9; i++)\n{\n   printf("%d\\n", *pa);\n   pa++ ; /*注意这里，指针值被修改*/\n}\n')])])]),t("p",[a._v("这时候的代码能成功编译吗？不能。因为pa指针被定义为常量指针了。这时与数组名a已经没有不同。这更说明了数组名就是常量指针。但是……")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("   int *const a = {3,4,5,6,7,3,7,4,4,6}; /*不行*/\n   int a[]={3,4,5,6,7,3,7,4,4,6}; /*可以，所以初始化数组时必定要这样。*/\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);