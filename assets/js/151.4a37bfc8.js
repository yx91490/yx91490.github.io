(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{561:function(t,a,s){"use strict";s.r(a);var e=s(10),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"类与类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类与类加载器"}},[t._v("$")]),t._v(" 类与类加载器")]),t._v(" "),a("ol",[a("li",[t._v("每一个类加载器都有一个独立的类名称空间。")]),t._v(" "),a("li",[t._v("一个类和加载他的类加载器来确定他在java虚拟机的唯一性。")]),t._v(" "),a("li",[t._v("类相等涉及的范围：\n"),a("ol",[a("li",[t._v("Class对象的equals()方法的返回结果")]),t._v(" "),a("li",[t._v("Class.isAssignableFrom()方法的返回结果")]),t._v(" "),a("li",[t._v("Class.isInstance()方法的返回结果")]),t._v(" "),a("li",[t._v("instanceof关键字的判定结果")])])]),t._v(" "),a("li",[t._v("两个class对象是否相等的条件：\n"),a("ol",[a("li",[t._v("类的完整类名一致")]),t._v(" "),a("li",[t._v("加载这个类的ClassLoader实例对象相同")])])])]),t._v(" "),a("p",[t._v("类加载过程：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("过程")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td"),t._v(" "),a("td",[t._v("加载")]),t._v(" "),a("td",[t._v("读入内存，创建一个"),a("code",[t._v("java.lang.Class")]),t._v("对象")])]),t._v(" "),a("tr",[a("td",[t._v("连接")]),t._v(" "),a("td",[t._v("验证")]),t._v(" "),a("td",[t._v("校验文件格式")])]),t._v(" "),a("tr",[a("td",[t._v("连接")]),t._v(" "),a("td",[t._v("准备")]),t._v(" "),a("td",[t._v("为类变量分配内存")])]),t._v(" "),a("tr",[a("td",[t._v("连接")]),t._v(" "),a("td",[t._v("解析")]),t._v(" "),a("td",[t._v("的符号引用替换为直接引用")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("初始化")]),t._v(" "),a("td",[t._v("执行类构造器<clinit>()方法")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("使用")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("卸载")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("由Java虚拟机自带的类加载器所加载的类，在虚拟机的生命周期中，始终不会被卸载。")]),t._v(" "),a("p",[t._v("由用户自定义的类加载器加载的类是可以被卸载的。")]),t._v(" "),a("p",[t._v("如果有下面的情况，类就会被卸载：")]),t._v(" "),a("ol",[a("li",[t._v("该类所有的实例都已经被回收，也就是java堆中不存在该类的任何实例。")]),t._v(" "),a("li",[t._v("加载该类的ClassLoader已经被回收。")]),t._v(" "),a("li",[t._v("该类对应的java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。")])]),t._v(" "),a("h2",{attrs:{id:"分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("$")]),t._v(" 分类")]),t._v(" "),a("ol",[a("li",[t._v("启动类加载器 BootstrapClassLoader <JAVA_HOME>/lib目录或者被-Xbootclasspath参数指定的路径中的rt.jar类库加载到内存中。无法被java程序直接引用。getClassLoader()中 return null代替。")]),t._v(" "),a("li",[t._v("扩展类加载器 sum.misc.Launcher$ExtClassLoader 实现。负责加载<JAVA_HOME>/lib/ext目录或者被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用这个类加载器。")]),t._v(" "),a("li",[t._v("应用程序类加载器 sum.misc.Launcher$AppClassLoader 实现。负责加载用户类路径上所指定的类库，开发者可以直接使用这个类加载器。")])]),t._v(" "),a("h2",{attrs:{id:"双亲委派模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派模型"}},[t._v("$")]),t._v(" 双亲委派模型")]),t._v(" "),a("p",[t._v("类加载器之间存在父子关系（这种关系不是继承关系，而是组合关系）：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("BootstrapClassLoader > ExtClassLoader > AppClassLoader > UserClassLoader\n")])])]),a("p",[t._v("子类加载器把加载请求委派给父类加载器完成，父加载器无法完成时子加载器才会尝试自己去加载。保证类在jvm中的唯一性。")]),t._v(" "),a("p",[a("strong",[t._v("为什么要破坏双亲委派模型")]),t._v("？")]),t._v(" "),a("p",[t._v("由 classloader 加载模型中的可见性(visibility)决定的：父类加载的类对子类是可见的， 然而子类加载的类 对父类却是不可见的。这时候就需要委托子类加载器去加载class文件。")]),t._v(" "),a("p",[a("strong",[t._v("破坏双亲委派模型")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("如果基础类又要回调用户的代码怎么办（如JNDI服务）？")]),t._v(" "),a("p",[t._v("线程上下文类加载器 可以通过"),a("code",[t._v("Thread.setConextClassLoader()")]),t._v("方法进行设置")])])]),t._v(" "),a("p",[t._v("SPI 是如何打破双亲委派模型的呢？")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// java.util.ServiceLoader#load(java.lang.Class<S>)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("S")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServiceLoader")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("S")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("S")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ClassLoader")]),t._v(" cl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getContextClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServiceLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("通过从线程上下文（ThreadContext）获取 classloader ，借助这个classloader 可以拿到实现类的 Class。")]),t._v(" "),a("p",[a("strong",[t._v("tomcat类加载器架构")])]),t._v(" "),a("p",[t._v("解决以下几个问题：")]),t._v(" "),a("ol",[a("li",[t._v("部署在同一个服务器上的两个web应用程序所使用java类库可以相互隔离。")]),t._v(" "),a("li",[t._v("部署在同一个服务器上的两个web应用程序所使用java类库可以相互共享(否则浪费方法区内存)。")]),t._v(" "),a("li",[t._v("服务器保证自身安全不受web应用程序的影响。")]),t._v(" "),a("li",[t._v("支持hostSwap功能。")])]),t._v(" "),a("p",[t._v("tomcat类库目录：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("目录")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("tomcat")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("web应用程序")]),t._v(" "),a("th",[t._v("加载器")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("/common")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",[t._v("CommonClassLoader")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("/server")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",[t._v("CatalinaClassLoader")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("/shared")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",[t._v("SharedClassLoader")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("/WEB-INF")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T(仅自己)")]),t._v(" "),a("td",[t._v("WebappClassLoader")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("BootstrapClassLoader\n  |_ExtClassLoader\n    |_AppClassLoader\n      |_CommonClassLoader\n        |_CatalinaClassLoader\n        |_SharedClassLoader\n          |_WebappClassLoader\n            |_JasperLoader\n")])])]),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("$")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.zhihu.com/question/49667892",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么说java spi破坏双亲委派模型？"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);