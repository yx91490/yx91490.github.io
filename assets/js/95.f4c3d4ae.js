(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{525:function(i,e,n){"use strict";n.r(e);var s=n(18),v=Object(s.a)({},(function(){var i=this,e=i._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[e("h1",{attrs:{id:"在debian-9上编译ibus-libpinyin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在debian-9上编译ibus-libpinyin"}},[i._v("$")]),i._v(" 在debian 9上编译ibus-libpinyin")]),i._v(" "),e("p",[i._v("ibus-libpinyin 的主页: https://github.com/libpinyin/ibus-libpinyin.")]),i._v(" "),e("p",[i._v("版本：V1.7")]),i._v(" "),e("p",[i._v("编译软件一般的流程是:")]),i._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[i._v("./configure\nmake\nsuudo make install\n")])])]),e("p",[i._v("但是源码目录没找到 configure 文件,只有一个 "),e("code",[i._v("autogen.sh")]),i._v(" 文件是可执行的,于是就试着运行了(建议在这里指定安装路径为 "),e("code",[i._v("/usr/share")]),i._v(" ,没尝试,原因见后文),发现这个脚本就是用来生成 configure 文件的,同时检测一些依赖关系.不久遇到了第一个依赖:")]),i._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[i._v("checking for IBUS... no\nconfigure: error: Package requirements (\n    ibus-1.0 >= 1.4.0\n) were not met:\n\nNo package 'ibus-1.0' found\n\nConsider adjusting the PKG_CONFIG_PATH environment variable if you\ninstalled software in a non-standard prefix.\n")])])]),e("p",[i._v("但是ibus的包我是装了,最后发现这是linux解决库依赖的一种配置,将相关的库的依赖写进一个 .pc 文件中,那这个 .pc 文件到哪里找呢?最后发现源里有个 "),e("code",[i._v("libibus-1.0-dev")]),i._v(" 的包提供了这个文件,那么同理找一个名为 "),e("code",[i._v("name")]),i._v(" 的依赖就是找 "),e("code",[i._v("libname-dev")]),i._v(" 的包,按这个思路顺利解决了 sqlite3 的依赖.然后发现 libpinyin 的版本低了,于是还要编译libpinyin的最新版:(")]),i._v(" "),e("p",[i._v("源码地址在这: https://github.com/libpinyin/libpinyin")]),i._v(" "),e("p",[i._v("同理运行 "),e("code",[i._v("autogen.sh")]),i._v(" 生成配置文件(建议在这里指定安装路径为 "),e("code",[i._v("/usr/share")]),i._v(" ,没尝试,原因见后文),配置这个的时候又遇到一个问题,")]),i._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[i._v("`cannot found Berkeley DB Version 4` \n")])])]),e("p",[i._v("google了一大圈发现是一个叫 "),e("code",[i._v("libdb4.8-dev")]),i._v(" 的包,但是源里没有,还是从oldstable源里找到的.最后libpinyin配置完了,执行")]),i._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[i._v("$make\n$sudo make install\n")])])]),e("p",[i._v("顺利完成.")]),i._v(" "),e("p",[i._v("继续 ibus-libpinyin 的配置.这时候它需要"),e("code",[i._v("gdk-3.0")]),i._v("的依赖,顺着之前的思路发现源里没有,于是又请教了google,发现是 "),e("code",[i._v("libgtk-3-dev")]),i._v(" 提供了这个依赖(有种莫名的悲伤-"),e("em",[i._v("-||),不得不说还是google亲啊!\n配置完后继续make,sudo make install顺利安装上了.默认的位置安装在"),e("code",[i._v("/usr/local/share/ibus-libpinyin")]),i._v("下,这就有问题了.因为ibus装在"),e("code",[i._v("/usr/share/ibus")]),i._v("下面,ibus并没有找到"),e("code",[i._v("ibus-libpinyin")]),i._v("的引擎,所以装上了但是用不了-")]),i._v("-||.\n找了半天发现了 "),e("code",[i._v("/usr/local/libexec/ibus-engine-libpinyin")]),i._v(",这似乎是ibus-libpinyin的引擎(engine),这个有个选项是-i,似乎没啥作用,于是跟源里的ibus-libpinyin安装的文件对比下发现有个"),e("code",[i._v("/usr/share/ibus/component/xxx.xml")]),i._v("好像是用来指定engine的,发现上一步 "),e("code",[i._v("ibus-engine-libpinyin -i")]),i._v(" 好像生成了 "),e("code",[i._v("/usr/local/share/ibus/component/xxx.xml")]),i._v(" ,copy到 "),e("code",[i._v("/usr/share/ibus/component/")]),i._v(" 下,重启,发现能切换输入法的引擎了.")]),i._v(" "),e("p",[i._v("总结:")]),i._v(" "),e("ol",[e("li",[i._v("库的依赖要找libxxx-dev包")]),i._v(" "),e("li",[i._v("运行autogen.sh时最好指定prefix为 "),e("code",[i._v("/usr/share")]),i._v(" ,不过没试,有兴趣的可以试试.")]),i._v(" "),e("li",[i._v("google是你的朋友.")])])])}),[],!1,null,null,null);e.default=v.exports}}]);