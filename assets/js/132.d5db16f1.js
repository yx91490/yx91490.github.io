(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{544:function(t,a,s){"use strict";s.r(a);var v=s(10),e=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java学习笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java学习笔记"}},[t._v("$")]),t._v(" Java学习笔记")]),t._v(" "),a("h3",{attrs:{id:"类型大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型大小"}},[t._v("$")]),t._v(" 类型大小")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("内存大小")]),t._v(" "),a("th",[t._v("取值范围")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("byte")]),t._v(" "),a("td",[t._v("1字节")]),t._v(" "),a("td",[t._v("[-128, 127]")])]),t._v(" "),a("tr",[a("td",[t._v("short")]),t._v(" "),a("td",[t._v("2字节")]),t._v(" "),a("td",[t._v("[-32768, 32767]")])]),t._v(" "),a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[t._v("4字节")]),t._v(" "),a("td",[t._v("[-2147483648, 2147483647]")])]),t._v(" "),a("tr",[a("td",[t._v("long")]),t._v(" "),a("td",[t._v("8字节")]),t._v(" "),a("td",[t._v("[-9223372036854775808, 9223372036854775807]")])]),t._v(" "),a("tr",[a("td",[t._v("float")]),t._v(" "),a("td",[t._v("4字节")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("double")]),t._v(" "),a("td",[t._v("8字节")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("char")]),t._v(" "),a("td",[t._v("2字节")]),t._v(" "),a("td",[a("code",[t._v("'\\u0000'")]),t._v(" ~ "),a("code",[t._v("'\\uffff'")])])]),t._v(" "),a("tr",[a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("1字节")]),t._v(" "),a("td",[t._v("false、true")])])])]),t._v(" "),a("p",[t._v("java对象在内存中占用的空间分为3类：")]),t._v(" "),a("ol",[a("li",[t._v("对象头（Header），HotSpot虚拟机的对象头包括两部分信息：\n"),a("ol",[a("li",[t._v("markword（ 在32位系统下是4字节，在64位系统下是8字节）")]),t._v(" "),a("li",[t._v("klass类型指针（ 在32位系统下是4字节， 在64位系统下是8字节）")]),t._v(" "),a("li",[t._v("如果对象是数组，那么额外增加4个字节")])])]),t._v(" "),a("li",[t._v("实例数据（Instance Data）")]),t._v(" "),a("li",[t._v("对齐填充（Padding），对象的大小必须是8字节的整数倍")])]),t._v(" "),a("h4",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("$")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2",target:"_blank",rel:"noopener noreferrer"}},[t._v("4.2. Primitive Types and Values"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/ulysses-you/p/10060463.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("java对象在内存的大小"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/lkforce/article/details/81128115",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java的对象头和对象组成详解"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"位移操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位移操作"}},[t._v("$")]),t._v(" 位移操作")]),t._v(" "),a("p",[t._v("用于操作整型或者字符型如"),a("code",[t._v("byte")]),t._v("， "),a("code",[t._v("char")]),t._v("， "),a("code",[t._v("short")]),t._v("， "),a("code",[t._v("int")]),t._v(" 和 "),a("code",[t._v("long")]),t._v("。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("操作 符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("位与")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("&")])]),t._v(" "),a("tr",[a("td",[t._v("位或")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("|")])]),t._v(" "),a("tr",[a("td",[t._v("异或")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("^")])]),t._v(" "),a("tr",[a("td",[t._v("取反")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("~")])]),t._v(" "),a("tr",[a("td",[t._v("左移")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("<<")])]),t._v(" "),a("tr",[a("td",[t._v("右移")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v(">>")])]),t._v(" "),a("tr",[a("td",[t._v("无符号右移")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v(">>>")])])])]),t._v(" "),a("h2",{attrs:{id:"泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("$")]),t._v(" 泛型")]),t._v(" "),a("h3",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("$")]),t._v(" 优点")]),t._v(" "),a("ul",[a("li",[t._v("编译时的类型检查（类型安全）")]),t._v(" "),a("li",[t._v("消除强制类型转换")])]),t._v(" "),a("h3",{attrs:{id:"泛型类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型类"}},[t._v("$")]),t._v(" 泛型类")]),t._v(" "),a("p",[t._v("泛型类的定义格式如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由尖括号 <> 分隔的类型参数部分在类名后面")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("T1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" T2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("类型参数可以是任何"),a("strong",[t._v("非基本类型")]),t._v("：任何类类型，任何接口类型，任何数组类型或甚至另一个类型参数。")]),t._v(" "),a("p",[t._v("按照惯例，类型参数名称是单个大写字母。最常用的类型参数名称是：")]),t._v(" "),a("ul",[a("li",[t._v("E - 元素（由 Java 集合框架广泛使用）")]),t._v(" "),a("li",[t._v("K - Key")]),t._v(" "),a("li",[t._v("N - Number")]),t._v(" "),a("li",[t._v("T - Type")]),t._v(" "),a("li",[t._v("V - Value")]),t._v(" "),a("li",[t._v("S,U,V 等。第2， 3， 4个类型")])]),t._v(" "),a("p",[a("code",[t._v("Box")]),t._v(" 是泛型 "),a("code",[t._v("Box <T>")]),t._v(" 的原始类型。但是非泛型类或接口类型不是原始类型。")]),t._v(" "),a("p",[t._v("给定两个具体类型 A 和 B（例如 Number 和 Integer），"),a("code",[t._v("MyClass <A>")]),t._v(" 与 "),a("code",[t._v("MyClass <B>")]),t._v(" 没有关系， 不管 A 和 B 是否相关。"),a("code",[t._v("MyClass <A>")]),t._v(" 和 "),a("code",[t._v("MyClass <B>")]),t._v(" 的公共父项是 Object。")]),t._v(" "),a("p",[t._v("只要不改变类型参数，子类型关系在类型之间保留： "),a("code",[t._v("ArrayList <String>")]),t._v(" 是 "),a("code",[t._v("List <String>")]),t._v(" 的一个子类型。")]),t._v(" "),a("p",[t._v("为了向后兼容，允许将参数化类型分配给其原始类型。")]),t._v(" "),a("p",[t._v("但是，如果将原始类型分配给参数化类型，则会收到"),a("code",[t._v("Unchecked assignment")]),t._v("警告。")]),t._v(" "),a("h3",{attrs:{id:"泛型方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法"}},[t._v("$")]),t._v(" 泛型方法")]),t._v(" "),a("p",[t._v("作用域仅限于声明它的方法。")]),t._v(" "),a("p",[t._v("允许使用静态和非静态泛型方法，以及泛型类构造函数。")]),t._v(" "),a("p",[t._v("只要编译器可以从上下文中推断出类型参数，就可以 用一组空的类型参数 "),a("code",[t._v("<>")]),t._v(" 替换调用泛型类的构造函数所需的类型参数。 这对尖括号非正式地称为“钻石操作符”。")]),t._v(" "),a("h3",{attrs:{id:"有界类型参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有界类型参数"}},[t._v("$")]),t._v(" 有界类型参数")]),t._v(" "),a("p",[t._v("一个类型参数可以有多个边界：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" B1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" B2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" B3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h3",{attrs:{id:"通配符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[t._v("$")]),t._v(" 通配符")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 上界通配符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 无界通配符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下界通配符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("上界通配符将未知类型限制为特定类型或该类型的子类型。")]),t._v(" "),a("p",[t._v("下界通配符将未知类型限制为该类型的特定类型或超类型。")]),t._v(" "),a("p",[t._v("可以为通配符指定上界，也可以指定下界，但不能同时指定两者。")]),t._v(" "),a("p",[a("code",[t._v("List<? extends A>")]),t._v(" 可以非正式地认为是只读的。")]),t._v(" "),a("p",[t._v("对于任何具体类型 A，"),a("code",[t._v("List <A>")]),t._v(" 是 "),a("code",[t._v("List <?>")]),t._v(" 的子类型。")]),t._v(" "),a("p",[a("code",[t._v("List <Object>")]),t._v(" 和 "),a("code",[t._v("List <?>")]),t._v(" 是不一样的。可以将对象或任何对象的子类型插入到 "),a("code",[t._v("List <Object>")]),t._v(" 中。 但是只能将 null 插入到 "),a("code",[t._v("List <?>")]),t._v(" 中。")]),t._v(" "),a("h3",{attrs:{id:"类型擦除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除"}},[t._v("$")]),t._v(" 类型擦除")]),t._v(" "),a("p",[t._v("在类型擦除过程中，Java 编译器擦除所有类型参数，并在类型参数有界的情况下用它的第一个边界替换每个类型参数；如果类型参数是无界的，那么它将替换为 Object。")]),t._v(" "),a("p",[t._v("类型擦除确保没有为参数化类型创建新的类；因此，泛型不会导致运行时开销。")]),t._v(" "),a("p",[t._v("可"),a("em",[t._v("具体化")]),t._v("类型是其类型信息在运行时完全可用的类型。这包括原语、非泛型类型、原始类型和未绑定通配符的调用。")]),t._v(" "),a("p",[a("em",[t._v("不可具体化类型")]),t._v("是在编译时通过类型擦除删除信息的类型——调用未定义为无界通配符的泛型类型。")]),t._v(" "),a("p",[t._v("Java 编程语言不允许创建参数化类型的数组。")]),t._v(" "),a("h3",{attrs:{id:"参考-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考-2"}},[t._v("$")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zq99299.github.io/java-tutorial/java/generics/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JAVA8 官网笔记教程-泛型"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://docs.oracle.com/javase/tutorial/java/generics/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Java™ Tutorials-Generics"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);