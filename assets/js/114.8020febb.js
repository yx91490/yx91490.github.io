(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{509:function(t,a,v){"use strict";v.r(a);var _=v(10),r=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"分布式事务接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务接口"}},[t._v("$")]),t._v(" 分布式事务接口")]),t._v(" "),a("h2",{attrs:{id:"cap理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap理论"}},[t._v("$")]),t._v(" CAP理论")]),t._v(" "),a("p",[t._v("2000 年 7月，来自加州大学伯克利分校的 Eric Brewer 教授提出了著名的 CAP 猜想。2年后，来自麻省理工学院的 Seth Gilbert 和 Nancy Lynch 从理论上证明了 CAP 可行性，从此 CAP 定理在学术上成为了分布式计算领域公认的定理，影响着分布式计算的发展。")]),t._v(" "),a("p",[t._v("CAP原则包含如下三个元素：")]),t._v(" "),a("ul",[a("li",[t._v("C（Consistency） ： 一致性。在分布式系统中的所有数据备份，在同一时刻具有同样的值，所有节点在同一时刻读取的数据都是最新的数据副本。")]),t._v(" "),a("li",[t._v("A（Availability）：可用性，好的响应性能。完全的可用性指的是在任何故障模型下，服务都会在有限的时间内处理完成井进行响应。")]),t._v(" "),a("li",[t._v("P（Partition tolerance） ：分区容忍性。尽管网络上有部分消息丢失，但系统仍然可继续工作。")])]),t._v(" "),a("p",[t._v("CAP 原理证明，任何分布式系统只可同时满足以上两点，无法三者兼顾。")]),t._v(" "),a("h3",{attrs:{id:"cap-证明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap-证明"}},[t._v("$")]),t._v(" CAP 证明")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"https://www.iteblog.com/archives/2390.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("一篇文章搞清楚什么是分布式系统 CAP 定理"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"base理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[t._v("$")]),t._v(" Base理论")]),t._v(" "),a("p",[t._v("BASE 是 Basically Available（基本可用）、Soft state（软状态）和 Eventually consistent（最终一致性）三个短语的简写，由 eBay 架构师 Dan Pritchett 于 2008 年在《BASE: An Acid Alternative》论文中首次提出。")]),t._v(" "),a("p",[t._v("BASE 模型包含如下三个元素：")]),t._v(" "),a("ul",[a("li",[t._v("BA：（"),a("strong",[t._v("B")]),t._v("asically "),a("strong",[t._v("A")]),t._v("vailable ），基本可用。")]),t._v(" "),a("li",[t._v("S：（ "),a("strong",[t._v("S")]),t._v("oft State），软状态，状态可以在一段时间内不同步。")]),t._v(" "),a("li",[t._v("E：（"),a("strong",[t._v("E")]),t._v("ventually Consistent ），最终一致，在一定的时间窗口内， 最终数据达成一致即可。")])]),t._v(" "),a("h3",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("$")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.iteblog.com/archives/2352.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式系统一致性问题、CAP定律以及 BASE 理论"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"两阶段提交协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两阶段提交协议"}},[t._v("$")]),t._v(" 两阶段提交协议")]),t._v(" "),a("p",[t._v("两阶段提交协议的目标在于为分布式系统保证数据的一致性，许多分布式系统采用该协议提供对分布式事务的支持。")]),t._v(" "),a("p",[t._v("二阶段提交算法的成立基于以下假设：")]),t._v(" "),a("ul",[a("li",[t._v("该分布式系统中，存在一个节点作为协调者（Coordinator），其他节点作为参与者（Participants）。且节点之间可以进行网络通信。")]),t._v(" "),a("li",[t._v("所有节点都采用预写式日志，且日志被写入后即被保持在可靠的存储设备上，即使节点损坏不会导致日志数据的消失。")]),t._v(" "),a("li",[t._v("所有节点不会永久性损坏，即使损坏后仍然可以恢复。")])]),t._v(" "),a("p",[t._v("该协议将一个分布式的事务过程拆分成两个阶段： "),a("strong",[t._v("投票")]),t._v(" 和 "),a("strong",[t._v("事务提交")]),t._v(" 。")]),t._v(" "),a("h4",{attrs:{id:"第一阶段-提交请求阶段-也被称作投票阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一阶段-提交请求阶段-也被称作投票阶段"}},[t._v("$")]),t._v(" 第一阶段(提交请求阶段，也被称作投票阶段)")]),t._v(" "),a("ol",[a("li",[t._v("协调者节点向所有参与者节点询问是否可以执行提交操作，并开始等待各参与者节点的响应。")]),t._v(" "),a("li",[t._v("参与者节点执行询问发起为止的所有事务操作，并将Undo信息和Redo信息写入日志。")]),t._v(" "),a("li",[t._v('各参与者节点响应协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个"同意"消息；如果参与者节点的事务操作实际执行失败，则它返回一个"中止"消息。')])]),t._v(" "),a("h4",{attrs:{id:"第二阶段-提交执行阶段-也被称作完成阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二阶段-提交执行阶段-也被称作完成阶段"}},[t._v("$")]),t._v(" 第二阶段(提交执行阶段，也被称作完成阶段)")]),t._v(" "),a("h5",{attrs:{id:"成功"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成功"}},[t._v("$")]),t._v(" 成功")]),t._v(" "),a("p",[t._v('当协调者节点从所有参与者节点获得的响应消息都为"同意"时：')]),t._v(" "),a("ol",[a("li",[t._v('协调者节点向所有参与者节点发出"正式提交"的请求。')]),t._v(" "),a("li",[t._v("参与者节点正式完成操作，并释放在整个事务期间内占用的资源。")]),t._v(" "),a("li",[t._v('参与者节点向协调者节点发送"完成"消息。')]),t._v(" "),a("li",[t._v('协调者节点收到所有参与者节点反馈的"完成"消息后，完成事务。')])]),t._v(" "),a("h5",{attrs:{id:"失败"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#失败"}},[t._v("$")]),t._v(" 失败")]),t._v(" "),a("p",[t._v('如果任一参与者节点在第一阶段返回的响应消息为"终止"，或者协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：')]),t._v(" "),a("ol",[a("li",[t._v('协调者节点向所有参与者节点发出"回滚操作"的请求。')]),t._v(" "),a("li",[t._v("参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源。")]),t._v(" "),a("li",[t._v('参与者节点向协调者节点发送"回滚完成"消息。')]),t._v(" "),a("li",[t._v('协调者节点收到所有参与者节点反馈的"回滚完成"消息后，取消事务。')])]),t._v(" "),a("p",[t._v("二阶段提交还是有几个缺点的：")]),t._v(" "),a("ol",[a("li",[t._v("执行过程中，所有参与节点都是事务阻塞型的。")]),t._v(" "),a("li",[t._v("一旦协调者发生故障。参与者会一直阻塞下去。")]),t._v(" "),a("li",[t._v("数据不一致")]),t._v(" "),a("li",[t._v("协调者发出Commmit消息之后宕机的情况，导致对某一事务的不确定性")])]),t._v(" "),a("h3",{attrs:{id:"参考-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考-2"}},[t._v("$")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zh.wikipedia.org/zh-hans/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4",target:"_blank",rel:"noopener noreferrer"}},[t._v("二阶段提交"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"三阶段提交协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三阶段提交协议"}},[t._v("$")]),t._v(" 三阶段提交协议")]),t._v(" "),a("p",[t._v("三阶段提交是为解决两阶段提交协议的缺点而设计的。")]),t._v(" "),a("p",[t._v("三阶段提交有两个改动点：")]),t._v(" "),a("ol",[a("li",[t._v("同时在协调者和参与者中都引入超时机制")]),t._v(" "),a("li",[t._v("在第一阶段和第二阶段中插入一个准备阶段，保证了在最后提交阶段之前各参与节点状态的一致。")])]),t._v(" "),a("h3",{attrs:{id:"参考-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考-3"}},[t._v("$")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4",target:"_blank",rel:"noopener noreferrer"}},[t._v("三阶段提交"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/35616810",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式一致性之两阶段提交协议、三阶提交协议"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);