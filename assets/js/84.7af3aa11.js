(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{512:function(a,e,t){"use strict";t.r(e);var s=t(18),_=Object(s.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"《zookeeper分布式过程协同技术详解》笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#《zookeeper分布式过程协同技术详解》笔记"}},[a._v("$")]),a._v(" 《ZooKeeper分布式过程协同技术详解》笔记")]),a._v(" "),e("h2",{attrs:{id:"第一章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第一章"}},[a._v("$")]),a._v(" 第一章")]),a._v(" "),e("h3",{attrs:{id:"_1-1-zookeeper的使命"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-zookeeper的使命"}},[a._v("$")]),a._v(" 1.1 ZooKeeper的使命")]),a._v(" "),e("p",[a._v("它可以在分布式系统 中协作多个任务。一个协作任务是指一个包含多个进程的任务，这个任务可以是为了协作或者是为了竞争。")]),a._v(" "),e("p",[a._v("ZooKeeper客户端功能包括：")]),a._v(" "),e("ul",[e("li",[a._v("保障强一致性、有序性和持久性")]),a._v(" "),e("li",[a._v("实现通用的同步原语的能力")]),a._v(" "),e("li",[a._v("提供了一种简单的并发处理机制")])]),a._v(" "),e("p",[a._v("ZooKeeper不适用于海量数据存储。")]),a._v(" "),e("h3",{attrs:{id:"_1-2-示例-主-从应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-示例-主-从应用"}},[a._v("$")]),a._v(" 1.2 示例：主-从应用")]),a._v(" "),e("p",[a._v("主-从架构：一个在分布式系统中得到广泛应用的架构。主节点进程负责跟踪从节点状态和任务的有效性，并分配任务到从节点。对于ZooKeeper来说，这个架构风格具有代表性，阐述了大多数流行的任务，如：")]),a._v(" "),e("ul",[e("li",[a._v("选举主节点")]),a._v(" "),e("li",[a._v("跟踪有效的从节点")]),a._v(" "),e("li",[a._v("维护应用元数据")])]),a._v(" "),e("p",[a._v("要实现主从模式的系统，必须解决以下三个关键问题：")]),a._v(" "),e("ul",[e("li",[a._v("主节点崩溃（备份主节点故障转移，避免脑裂）")]),a._v(" "),e("li",[a._v("从节点崩溃（主节点检测从节点崩溃的能力，消除崩溃副作用）")]),a._v(" "),e("li",[a._v("通信故障（从节点适应多个从节点执行相同任务的可能性）")])]),a._v(" "),e("p",[a._v("主从架构需求：")]),a._v(" "),e("ul",[e("li",[a._v("主节点选举")]),a._v(" "),e("li",[a._v("崩溃检测")]),a._v(" "),e("li",[a._v("组成员关系管理")]),a._v(" "),e("li",[a._v("元数据管理")])]),a._v(" "),e("h2",{attrs:{id:"第2章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第2章"}},[a._v("$")]),a._v(" 第2章")]),a._v(" "),e("h3",{attrs:{id:"_2-1-zookeeper基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-zookeeper基础"}},[a._v("$")]),a._v(" 2.1 ZooKeeper基础")]),a._v(" "),e("p",[a._v("ZooKeeper并不直接暴露原语，它暴露了由一小部分调用方法组成的类似文件系统的API，以便允许应用实现自己的原语。")]),a._v(" "),e("h4",{attrs:{id:"api概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api概述"}},[a._v("$")]),a._v(" API概述")]),a._v(" "),e("ul",[e("li",[a._v("create /path data")]),a._v(" "),e("li",[a._v("delete /path")]),a._v(" "),e("li",[a._v("exists /path")]),a._v(" "),e("li",[a._v("setData /path data")]),a._v(" "),e("li",[a._v("getData /path")]),a._v(" "),e("li",[a._v("getChildren /path")])]),a._v(" "),e("p",[a._v("ZooKeeper不允许局部写入或读取znode的数据。")]),a._v(" "),e("h4",{attrs:{id:"znode类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#znode类型"}},[a._v("$")]),a._v(" znode类型")]),a._v(" "),e("ul",[e("li",[a._v("persistent")]),a._v(" "),e("li",[a._v("ephemeral")]),a._v(" "),e("li",[a._v("persistent_sequential")]),a._v(" "),e("li",[a._v("ephemeral_sequential")])]),a._v(" "),e("h4",{attrs:{id:"监视与通知"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监视与通知"}},[a._v("$")]),a._v(" 监视与通知")]),a._v(" "),e("p",[a._v("为了替换客户端的轮询，选择了基于通知的机制。")]),a._v(" "),e("p",[a._v("客户端必须在每次通知后设置一个新的监视点。")]),a._v(" "),e("p",[a._v("通知机制的一个重要保障是，对同一个znode的操作，先向客户端传送通知，然后再对该节点进行变更。保证客户端以全局的顺序观察zookeeper的状态。")]),a._v(" "),e("h4",{attrs:{id:"版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本"}},[a._v("$")]),a._v(" 版本")]),a._v(" "),e("p",[a._v("使用版本来阻止并行操作的不一致性。")]),a._v(" "),e("p",[a._v("每个znode都有一个版本号，它随着每次数据变化而自增。")]),a._v(" "),e("p",[a._v("两个API setData和delete调用以版本号为传入参数，只有当传入参数的版本号与服务器上的版本号一致时调用才会成功。")]),a._v(" "),e("h4",{attrs:{id:"zookeeper仲裁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper仲裁"}},[a._v("$")]),a._v(" zookeeper仲裁")]),a._v(" "),e("h4",{attrs:{id:"会话"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#会话"}},[a._v("$")]),a._v(" 会话")]),a._v(" "),e("p",[a._v("客户端提交给zookeeper的所有操作均关联在一个会话上，会话终止=>会话期间创建的临时节点消失。")]),a._v(" "),e("p",[a._v("会话提供了顺序保证。")]),a._v(" "),e("p",[a._v("会话的状态：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("NOT_CONNECTED => CONNECTING <=> CONNECTED => CLOSED\n                     |_________________________↑\n")])])]),e("p",[a._v("客户端尝试连接到一个不同的服务器时，这个服务器的状态要与最后连接的服务器的zookeeper状态保持最新。")]),a._v(" "),e("h4",{attrs:{id:"主从模式例子的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主从模式例子的实现"}},[a._v("$")]),a._v(" 主从模式例子的实现")]),a._v(" "),e("p",[a._v("主从模式的模型包括三个角色：")]),a._v(" "),e("ul",[e("li",[a._v("主节点")]),a._v(" "),e("li",[a._v("从节点")]),a._v(" "),e("li",[a._v("客户端")])]),a._v(" "),e("p",[a._v("实现过程：")]),a._v(" "),e("p",[a._v("创建主节点：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('create -e /master "master2.example.com:223"\n')])])]),e("p",[a._v("创建一些必要节点：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('create /workers ""\ncreate /tasks ""\ncreate /assign "" \n')])])]),e("p",[a._v("主节点监视/workers, /tasks子节点变化：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ls /workers true\nls /tasks true\n")])])]),e("p",[a._v("从节点创建：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('create -e /workers/worker1.example.com "worker1.example.com:2224"\n')])])]),e("p",[a._v("从节点准备接收任务：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('create /assign/worker1.example.com "" \n')])])]),e("p",[a._v("从节点等待任务分配：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ls /assign/worker1.example.com true\n")])])]),e("p",[a._v("客户端提交任务，并监视新建的/tasks/task-0000000000子字节：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('create -s /tasks/task- "cmd"\n')])])]),e("p",[a._v("从节点执行完毕，更新任务状态：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('setData /tasks/task-0000000000/status "done"\n')])])]),e("p",[a._v("客户端检查结果：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("get /tasks/task-0000000000\n")])])]),e("h2",{attrs:{id:"第三章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第三章"}},[a._v("$")]),a._v(" 第三章")]),a._v(" "),e("p",[a._v("一个对象的构造函数没有返回前不要调用其他函数。")])])}),[],!1,null,null,null);e.default=_.exports}}]);