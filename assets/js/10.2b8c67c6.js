(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{317:function(t,_,v){t.exports=v.p+"assets/img/kudu-architecture-2.28829556.png"},318:function(t,_,v){t.exports=v.p+"assets/img/rowset.9fbe4107.png"},319:function(t,_,v){t.exports=v.p+"assets/img/v2-c74cf1feda96eb38805ee245fd835f9d_1440w-20210813141135648.9b71e048.jpg"},320:function(t,_,v){t.exports=v.p+"assets/img/kudu_diskrowset_cfile.3dc4c1aa.png"},321:function(t,_,v){t.exports=v.p+"assets/img/v2-ab89f645dd7087e3b4fa98e8242f403f_1440w-20210813142133735.1cf27e0b.jpg"},322:function(t,_,v){t.exports=v.p+"assets/img/v2-fce7c3b9a57fa0b4808178496afab256_1440w.5c751b3d.jpg"},462:function(t,_,v){"use strict";v.r(_);var e=v(10),a=Object(e.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"kudu笔记"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kudu笔记"}},[t._v("$")]),t._v(" Kudu笔记")]),t._v(" "),_("h2",{attrs:{id:"设计目标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计目标"}},[t._v("$")]),t._v(" 设计目标")]),t._v(" "),_("p",[t._v("Kudu 设计最初的目标是:")]),t._v(" "),_("ul",[_("li",[t._v("在 HDFS 和 HBase 之间取得一个比较好的折衷")]),t._v(" "),_("li",[t._v("尽可能快的列式扫描")]),t._v(" "),_("li",[t._v("尽可能快的随机读写，ms 级响应")]),t._v(" "),_("li",[t._v("高可用、容错、持久性、响应时长稳定")]),t._v(" "),_("li",[t._v("可以充分利用现代化的硬件设施，如 SSD NVMe")])]),t._v(" "),_("h2",{attrs:{id:"架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[t._v("$")]),t._v(" 架构")]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:v(317),alt:"kudu架构"}}),t._v(" "),_("h2",{attrs:{id:"表和模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#表和模式"}},[t._v("$")]),t._v(" 表和模式")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("必须定义主键，不支持二级索引")])]),t._v(" "),_("li",[_("p",[t._v("根据主键的插入、更新和删除")])]),t._v(" "),_("li",[_("p",[t._v("仅提供 Scan 操作来从表中读取数据")])]),t._v(" "),_("li",[_("p",[t._v("在一次scan中可以添加任意数量的谓词（列和常量值之间的比较，以及复合主键范围）")])]),t._v(" "),_("li",[_("p",[t._v("支持 "),_("code",[t._v("projection")])])]),t._v(" "),_("li",[_("p",[t._v("Kudu 不提供任何多行事务 API")])]),t._v(" "),_("li",[_("p",[t._v("Kudu 不支持 MVCC 数据模型")])])]),t._v(" "),_("p",[t._v("Kudu 提供两种一致性模型：")]),t._v(" "),_("ol",[_("li",[t._v("快照一致性：保证了来自单个客户端的读写一致性")]),t._v(" "),_("li",[t._v("外部一致性")])]),t._v(" "),_("h2",{attrs:{id:"分区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分区"}},[t._v("$")]),t._v(" 分区")]),t._v(" "),_("p",[t._v("分区模式由零个或多个哈希分区规则和可选的范围分区规则组成：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("散列分区规则由主键列的子集和多个bucket组成。")])]),t._v(" "),_("li",[_("p",[t._v("范围分区规则由主键列的有序子集组成。")])])]),t._v(" "),_("p",[t._v("分区规则：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("hash分区规则：首先连接指定列的值，然后以bucket数为模计算结果字符串的哈希码，从而将元组转换为二进制键。")])]),t._v(" "),_("li",[_("p",[t._v("范围分区规则：通过使用保序编码连接指定列的值，将元组映射为二进制字符串。")])])]),t._v(" "),_("p",[t._v("通过使用这些分区规则，用户可以根据他们的特定工作负载轻松地在查询并行性和查询并发性之间进行权衡。")]),t._v(" "),_("p",[t._v("【误区】hash分区和范围分区在物理存储上哪个先哪个后？")]),t._v(" "),_("h2",{attrs:{id:"副本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#副本"}},[t._v("$")]),t._v(" 副本")]),t._v(" "),_("p",[t._v("写入操作同步过程：")]),t._v(" "),_("ol",[_("li",[t._v("向leader副本发送写入 RPC")]),t._v(" "),_("li",[t._v("加锁")]),t._v(" "),_("li",[t._v("选择一个 MVCC 时间戳")]),t._v(" "),_("li",[t._v("并通过 Raft 向其follower提议操作")]),t._v(" "),_("li",[t._v("如果大多数副本接受写入并将其记录到自己的本地预写日志，则在所有副本上提交")])]),t._v(" "),_("p",[t._v("如果leader本身失败，Raft 算法会迅速选出一个新的leader。")]),t._v(" "),_("p",[t._v("Kudu 使用 500 毫秒的心跳间隔和 1500 毫秒的选举超时；")]),t._v(" "),_("p",[t._v("Kudu 对 Raft 算法进行了一些改进：")]),t._v(" "),_("ol",[_("li",[t._v("我们在leader选举失败后采用指数退避算法。")]),t._v(" "),_("li",[t._v("当一个新的leader联系一个日志与自己不同的follower时，Kudu 立即跳回到最后一个已知的 committedIndex")])]),t._v(" "),_("p",[t._v("Kudu 不会复制tablet的磁盘存储，而只会复制其操作日志。tablet的每个副本上的物理存储完全解耦。")]),t._v(" "),_("p",[t._v("remote bootstrap添加副本过程：")]),t._v(" "),_("ol",[_("li",[t._v("提交配置更改：新副本添加为PRE VOTER状态")]),t._v(" "),_("li",[t._v("Raft leader副本触发 StartRemoteBootstrap RPC")]),t._v(" "),_("li",[t._v("目标服务器从当前leader那里拉取tablet数据和日志的快照")]),t._v(" "),_("li",[t._v("新服务器会按照与服务器重启后相同的过程打开tablet")]),t._v(" "),_("li",[t._v("重放任何必要的预写日志")]),t._v(" "),_("li",[t._v("提交配置更改：将新副本转换为完整 VOTER")])]),t._v(" "),_("p",[t._v("删除副本过程：")]),t._v(" "),_("ol",[_("li",[t._v("提交配置更改：剔除要驱逐的节点")]),t._v(" "),_("li",[t._v("其余节点将配置更改报告给 Master")]),t._v(" "),_("li",[t._v("Master 向被删除的节点发送 DeleteTablet RPC")])]),t._v(" "),_("h2",{attrs:{id:"kudu-master"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kudu-master"}},[t._v("$")]),t._v(" Kudu Master")]),t._v(" "),_("p",[t._v("Kudu Master关键的职责：")]),t._v(" "),_("ol",[_("li",[t._v("catalog manager：schema的当前version，复制级别。表的状态（creating, running, deleting等），tablet集合。")]),t._v(" "),_("li",[t._v("集群协调器：服务器状态监控，故障转移")]),t._v(" "),_("li",[t._v("tablet目录：哪些tablet server托管每个tablet的副本")])]),t._v(" "),_("p",[t._v("备份主节点仅充当 Raft follower，不为客户端请求提供服务。")]),t._v(" "),_("p",[t._v("创建表过程：")]),t._v(" "),_("ol",[_("li",[t._v("master将表记录写入catalog表")]),t._v(" "),_("li",[t._v("master选择tablet server来托管tablet副本，master创建tablet元数据")]),t._v(" "),_("li",[t._v("master向tablet server上发送创建副本请求")])]),t._v(" "),_("p",[t._v("schema变更和删除和创建表类似。")]),t._v(" "),_("p",[t._v("tablet状态管理过程：")]),t._v(" "),_("ol",[_("li",[t._v("Leader如果很长一段时间内没有与follower成功通信，它会提出 Raft 配置更改，将 follower 从 Raft 配置中删除")]),t._v(" "),_("li",[t._v("配置更改提交后，其余的 tablet servers 将向 Master 发出 tablet 报告")]),t._v(" "),_("li",[t._v("Master 会建议对 tablet 的leader副本进行配置更改")]),t._v(" "),_("li",[t._v("leader副本提出并提交配置更改操作，")]),t._v(" "),_("li",[t._v("通过tablet报告通知 Master 配置更改成功")])]),t._v(" "),_("h2",{attrs:{id:"tablet存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tablet存储"}},[t._v("$")]),t._v(" Tablet存储")]),t._v(" "),_("p",[t._v("Kudu 中tablet存储的实现解决了几个目标：")]),t._v(" "),_("ol",[_("li",[t._v("与Parquet类似的scan性能")]),t._v(" "),_("li",[t._v("低延迟随机更新")]),t._v(" "),_("li",[t._v("牺牲峰值性能以实现性能的可预测性")])]),t._v(" "),_("p",[t._v("RowSets：")]),t._v(" "),_("ol",[_("li",[t._v("包括一个MemRowSet和多个DiskRowSet")]),t._v(" "),_("li",[t._v("任何给定的活动（未删除）行都存在于一个 RowSet 中")]),t._v(" "),_("li",[t._v("不同RowSets行集不相交")]),t._v(" "),_("li",[t._v("不同RowSets的主键区间可能会相交")]),t._v(" "),_("li",[t._v("任何时候都有一个 MemRowSet 存储所有最近插入的行")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(318),alt:"rowset"}})]),t._v(" "),_("p",[t._v("MemRowSet 实现：")]),t._v(" "),_("ol",[_("li",[t._v("由内存中带有乐观锁的并发 B 树实现（排序特性允许对主键范围或单个键查找进行有效扫描）")]),t._v(" "),_("li",[t._v("B 树的键是对每一行的主键的保序编码（使用 memcmp 操作进行高效树遍历）")]),t._v(" "),_("li",[t._v("使用 MVCC 记录来表示删除，不支持从树中移除元素")]),t._v(" "),_("li",[t._v("不允许修改值大小，变更会附加到每个记录的链表")]),t._v(" "),_("li",[t._v("用next指针将叶节点链接在一起，以提高顺序扫描性能")]),t._v(" "),_("li",[t._v("没有实现完整的”trie树”（不太关心极高的随机访问吞吐量）")]),t._v(" "),_("li",[t._v("MemRowSet 是行式存储，即有指针指向单行数据")]),t._v(" "),_("li",[t._v("使用 SSE2 内存预取和JIT 编译进行优化以提高吞吐量")])]),t._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:v(319),alt:"img"}}),t._v(" "),_("p",[t._v("DiskRowSet 实现：")]),t._v(" "),_("ol",[_("li",[t._v("DiskRowSet 大小约为32M")]),t._v(" "),_("li",[t._v("DiskRowSet由两个主要组件组成：Base数据和Delta存储。")]),t._v(" "),_("li",[t._v("Base数据是不可变的")]),t._v(" "),_("li",[t._v("Base数据是 DiskRowSet 中行的按列组织的表示。")]),t._v(" "),_("li",[t._v("Base数据包括列，主键索引列（保存行的编码主键），分块的布隆过滤器")]),t._v(" "),_("li",[t._v("Base数据中列细分为page和每个page在rowset中序数偏移量的B树索引")]),t._v(" "),_("li",[t._v("Base数据还包括存储了")]),t._v(" "),_("li",[t._v("Delta 存储 = （内存）DeltaMemStores + （磁盘）DeltaFiles")]),t._v(" "),_("li",[t._v("DeltaMemStore 是一个并发 B 树")]),t._v(" "),_("li",[t._v("DeltaFile 是一个二进制类型的列块")]),t._v(" "),_("li",[t._v("Delta 存储都维护从（RowSet行偏移量、MVCC时间戳）元组到 RowChangeList 记录的映射")])]),t._v(" "),_("p",[t._v("布隆过滤器结构：")]),t._v(" "),_("ol",[_("li",[t._v("分成 4KB 的page")]),t._v(" "),_("li",[t._v("每个page对应一个小范围的key")]),t._v(" "),_("li",[t._v("用不可变的 B 树结构索引这些page")]),t._v(" "),_("li",[t._v("服务器LRU缓存里缓存了page及其索引")])]),t._v(" "),_("p",[t._v("列编码方式：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"left"}},[t._v("Column类型")]),t._v(" "),_("th",{staticStyle:{"text-align":"left"}},[t._v("支持的编码方式")]),t._v(" "),_("th",{staticStyle:{"text-align":"left"}},[t._v("默认编码方式")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"left"}},[t._v("int8, int16, int32, int64")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("plain, bitshuffle, run length")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("bitshuffle")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[t._v("date, unixtime_micros")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("plain, bitshuffle, run length")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("bitshuffle")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[t._v("float, double, decimal")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("plain, bitshuffle")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("bitshuffle")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[t._v("bool")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("plain, run length")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("run length")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[t._v("string, varchar, binary")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("plain, prefix, dictionary")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("dictionary")])])])]),t._v(" "),_("p",[t._v("Bitshuffle编码：重新排列一个值块，以存储每个值的最高有效位，然后第二个最高有效位，依此类推。适合具有许多重复值的列或按主键排序时变化量很小的列。")]),t._v(" "),_("p",[t._v("run length编码：通过存储值和计数将连续重复的值被压缩在一列中。适合按主键排序时具有许多连续重复值的列。")]),t._v(" "),_("p",[t._v("dictionary编码：构建唯一值的字典，并将每个列值编码为字典中对应的索引。适合基数低的列。")]),t._v(" "),_("p",[t._v("前缀编码：公共前缀被压缩在连续的列值中，适合公共前缀相同或主键的第一列相同的值。")]),t._v(" "),_("p",[_("img",{attrs:{src:v(320),alt:"kudu_diskrowset_cfile"}})]),t._v(" "),_("img",{staticStyle:{zoom:"40%"},attrs:{src:v(321),alt:"img"}}),t._v(" "),_("p",[t._v("数据更新流程：")]),t._v(" "),_("ol",[_("li",[t._v("首先查询DiskRowSet的主键索引列")]),t._v(" "),_("li",[t._v("根据DiskRowSet中列的B 树索引查找包含目标行的page")]),t._v(" "),_("li",[t._v("根据page元数据确定该page内第一个单元格的行偏移量")]),t._v(" "),_("li",[t._v("在page内搜索目标行，从而计算出目标行在整个 DiskRowSet 中的偏移量")]),t._v(" "),_("li",[t._v("将新的增量记录插入行集的 DeltaMemStore")])]),t._v(" "),_("h2",{attrs:{id:"插入"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#插入"}},[t._v("$")]),t._v(" 插入")]),t._v(" "),_("p",[t._v("Kudu如何确定待插入的主键是否已经存在？")]),t._v(" "),_("ol",[_("li",[t._v("使用DiskRowSets主键 Bloom Filter（LRU缓存）剪枝")]),t._v(" "),_("li",[t._v("使用DiskRowSets主键的最大值/最小值（区间树索引）剪枝")]),t._v(" "),_("li",[t._v("对于不能被剪枝的 DiskRowSet，需要在编码主键列（B 树，page cache）中查找")])]),t._v(" "),_("h2",{attrs:{id:"读取"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#读取"}},[t._v("$")]),t._v(" 读取")]),t._v(" "),_("ol",[_("li",[t._v("读取是分批运行，每个scanner可以断点续传")]),t._v(" "),_("li",[t._v("row batch在内存中是列式的")]),t._v(" "),_("li",[t._v("从 DiskRowSet 读取数据时使用scan的范围谓词来缩小范围：\n"),_("ol",[_("li",[t._v("如果scan设置了主键下限，在主键列内查找以确定下限row-offset")]),t._v(" "),_("li",[t._v("如果scan设置了主键上限，在主键列内查找以确定上限row-offset")])])]),t._v(" "),_("li",[t._v("接下来一次扫描一列：\n"),_("ol",[_("li",[t._v("定位到目标列起始row-offset")]),t._v(" "),_("li",[t._v("使用特定page编码的解码器将源列中的单元格复制到内存row batch中")]),t._v(" "),_("li",[t._v("根据当前scan的 MVCC 快照查询Delta存储，将单元格的更改应用于内存中的row batch")])])]),t._v(" "),_("li",[t._v("返回batch结果到 RPC 响应中并发送回客户端")])]),t._v(" "),_("h2",{attrs:{id:"延迟物化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#延迟物化"}},[t._v("$")]),t._v(" 延迟物化")]),t._v(" "),_("ol",[_("li",[t._v("在读取任何其他列之前读取具有相关range谓词的列")]),t._v(" "),_("li",[t._v("当谓词过滤此batch中所有行的情况下，不读取其他列")])]),t._v(" "),_("h2",{attrs:{id:"compaction"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#compaction"}},[t._v("$")]),t._v(" Compaction")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th"),t._v(" "),_("th",[t._v("Delta Compaction")]),t._v(" "),_("th",[t._v("RowSet Compaction")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("功能")]),t._v(" "),_("td",[t._v("合并Delta存储和Base存储")]),t._v(" "),_("td",[t._v("1. 清理已删除的行"),_("br"),t._v("2. 减少主键区间重叠的DiskRowSet的数量")])]),t._v(" "),_("tr",[_("td",[t._v("线程")]),t._v(" "),_("td",[t._v("后台maintenance线程")]),t._v(" "),_("td",[t._v("后台maintenance线程")])]),t._v(" "),_("tr",[_("td",[t._v("时机")]),t._v(" "),_("td",[t._v("根据delta和Base数据行数比率确定")]),t._v(" "),_("td",[t._v("根据背包问题确定")])]),t._v(" "),_("tr",[_("td",[t._v("备注")]),t._v(" "),_("td",[t._v("可以按列合并")]),t._v(" "),_("td",[t._v("基于主键的合并")])])])]),t._v(" "),_("img",{staticStyle:{zoom:"40%"},attrs:{src:v(322),alt:"img"}}),t._v(" "),_("h2",{attrs:{id:"后台线程调度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#后台线程调度"}},[t._v("$")]),t._v(" 后台线程调度")]),t._v(" "),_("p",[t._v("Kudu多个后台任务包括：")]),t._v(" "),_("ul",[_("li",[t._v("MemRowSets 刷写磁盘变为 DiskRowSets")]),t._v(" "),_("li",[t._v("MemDeltaStore 刷写磁盘变为 DeltaFiles")]),t._v(" "),_("li",[t._v("Delta Compaction: 将 Delta Store 部分数据合并到 Base Data 提升读性能")]),t._v(" "),_("li",[t._v("RowSet Compaction: 将多个 Disk Rowsets 进行 Compaction, 提升读写效率，物理删除数据行")])]),t._v(" "),_("h2",{attrs:{id:"与hbase对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#与hbase对比"}},[t._v("$")]),t._v(" 与HBase对比")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("对比项")]),t._v(" "),_("th",[t._v("Kudu")]),t._v(" "),_("th",[t._v("HBase")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("表元数据位置")]),t._v(" "),_("td",[t._v("Master")]),t._v(" "),_("td",[t._v("ZooKeeper")])]),t._v(" "),_("tr",[_("td",[t._v("分区规则")]),t._v(" "),_("td",[t._v("hash+range")]),t._v(" "),_("td",[t._v("key-range")])]),t._v(" "),_("tr",[_("td",[t._v("二级索引")]),t._v(" "),_("td",[t._v("不支持")]),t._v(" "),_("td",[t._v("不支持")])]),t._v(" "),_("tr",[_("td",[t._v("列类型")]),t._v(" "),_("td",[t._v("支持")]),t._v(" "),_("td",[t._v("不支持")])]),t._v(" "),_("tr",[_("td",[t._v("外部一致性保证")]),t._v(" "),_("td",[t._v("默认不支持")]),t._v(" "),_("td",[t._v("不支持")])]),t._v(" "),_("tr",[_("td",[t._v("写入指定时间戳")]),t._v(" "),_("td",[t._v("不支持")]),t._v(" "),_("td",[t._v("支持")])]),t._v(" "),_("tr",[_("td",[t._v("列式存储")]),t._v(" "),_("td",[t._v("是")]),t._v(" "),_("td",[t._v("否")])]),t._v(" "),_("tr",[_("td",[t._v("延迟物化")]),t._v(" "),_("td",[t._v("支持")]),t._v(" "),_("td",[t._v("不支持")])])])]),t._v(" "),_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("$")]),t._v(" 参考")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1727786",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文了解Kudu的核心原理"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"http://www.nosqlnotes.com/technotes/kudu-design/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kudu设计原理初探"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/44517915",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式存储系统Kudu与HBase的简要分析与对比"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://kudu.apache.org/docs/schema_design.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apache Kudu Schema Design"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://kudu.apache.org/docs/background_tasks.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Apache Kudu Background Maintenance Tasks"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("a",{attrs:{href:"https://github.com/apache/kudu/blob/ecbd8700e49bf60f15a9d261f0de425f2ba5413e/docs/design-docs/tablet.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kudu Tablet 设计文档"),_("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=a.exports}}]);