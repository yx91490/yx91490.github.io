(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{428:function(t,a,s){t.exports=s.p+"assets/img/image-20220316103915844.12ad9fbb.png"},429:function(t,a,s){t.exports=s.p+"assets/img/idea_code_template1.44165f1f.png"},430:function(t,a,s){t.exports=s.p+"assets/img/image-20201219222911799.cf6e15b3.png"},431:function(t,a,s){t.exports=s.p+"assets/img/image-20201202144214247.e21e5abd.png"},432:function(t,a,s){t.exports=s.p+"assets/img/image-20220105194738298.5050b480.png"},626:function(t,a,s){"use strict";s.r(a);var e=s(18),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"idea配置总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#idea配置总结"}},[t._v("$")]),t._v(" Idea配置总结")]),t._v(" "),a("h2",{attrs:{id:"配置highlight-level为syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置highlight-level为syntax"}},[t._v("$")]),t._v(" 配置Highlight Level为Syntax")]),t._v(" "),a("p",[t._v("Editor => Inspections => 取消选中Java")]),t._v(" "),a("img",{staticStyle:{zoom:"30%"},attrs:{src:s(428),alt:"image-20220316103915844"}}),t._v(" "),a("h2",{attrs:{id:"代码模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码模板"}},[t._v("$")]),t._v(" 代码模板")]),t._v(" "),a("p",[t._v("在工作中发现要大量写一些有固定模式的代码，比如声明一个logger:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger")]),t._v(" logger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LoggerFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLogger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这种代码写起来真的很没劲，于是灵机一动的我在想能不能让idea给我自动生成？ 百度了一下发现原来有个Live template的功能就是为这个需求而生的，而且已经内置了一些默认的代码模板，比如"),a("code",[t._v("fori")]),t._v("展开成for循环等等。看来idea还是博大精深还有许多功能没仔细研究。"),a("br"),t._v("\n既然已经找到了，编写一个logger的模板还是很简单的：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Logger")]),t._v(" logger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LoggerFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLogger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$className$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("需要注意的是要把"),a("code",[t._v("$className$")]),t._v("变量设置成内置的类名称函数"),a("code",[t._v("className()")]),t._v("，这样会自动生成正确的类名；"),a("code",[t._v("Abbreviation")]),t._v("设置成"),a("code",[t._v("log")]),t._v("，"),a("code",[t._v("Applicable Context")]),t._v("选择"),a("code",[t._v("Java/Declaration")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(429),alt:"idea_code_template变量"}})]),t._v(" "),a("p",[t._v("这个仅仅是个小菜，真正让我拍手称快的是自动生成从一种list到另一种list的转换的代码模板。工作中用的是jdk1.7的语法，不能用lambda表达式，因此一些list转换则变得十分繁琐，要定义一个又一个私有方法来完成这种转换，或者使用guava的Lists.transform()方法，但是匿名内部类的使用又使得代码变得不够优雅，而且官方也不推荐这么用。但是我们可以定义一个模板来自动化的完成这种转换：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("$from$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" inputList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Lists")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newArrayList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$from$ input "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" inputList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$checkNull$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        $convert$\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$checkElement$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$element$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("不得不说idea是一个神器，神器在手，就看你能不能用好了。")]),t._v(" "),a("h2",{attrs:{id:"虚拟空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟空间"}},[t._v("$")]),t._v(" 虚拟空间")]),t._v(" "),a("p",[t._v("开启编辑器的虚拟空间功能，实现类似sublime Text的效果：")]),t._v(" "),a("img",{staticStyle:{zoom:"25%"},attrs:{src:s(430),alt:"image-20201219222911799"}}),t._v(" "),a("p",[t._v("勾选上"),a("code",[t._v("File")]),t._v(" -> "),a("code",[t._v("Settings")]),t._v(" -> "),a("code",[t._v("Editor")]),t._v(" -> "),a("code",[t._v("Show virtual space at file bottom")]),t._v("。")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"https://stackoverflow.com/questions/36715803/scrolling-past-the-end-in-idea",target:"_blank",rel:"noopener noreferrer"}},[t._v("scrolling past the end in IDEA"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"快捷键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快捷键"}},[t._v("$")]),t._v(" 快捷键")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("功能")])]),t._v(" "),a("th",[t._v("Macos默认快捷键")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Go to Implementation(s)")]),t._v(" "),a("td",[t._v("⌥⌘B")])]),t._v(" "),a("tr",[a("td",[t._v("File Structure")]),t._v(" "),a("td",[t._v("⌘F12")])]),t._v(" "),a("tr",[a("td",[t._v("Find Usage")]),t._v(" "),a("td",[t._v("⌥F7")])]),t._v(" "),a("tr",[a("td",[t._v("Quick Documentation")]),t._v(" "),a("td",[t._v("F1")])]),t._v(" "),a("tr",[a("td",[t._v("Optimize Imports")]),t._v(" "),a("td",[t._v("⌃⌥O")])]),t._v(" "),a("tr",[a("td",[t._v("Find")]),t._v(" "),a("td",[t._v("⌘F")])]),t._v(" "),a("tr",[a("td",[t._v("Replace")]),t._v(" "),a("td",[t._v("⌘R")])]),t._v(" "),a("tr",[a("td",[t._v("Undo")]),t._v(" "),a("td",[t._v("⌘Z")])]),t._v(" "),a("tr",[a("td",[t._v("Redo")]),t._v(" "),a("td",[t._v("⇧⌘Z")])]),t._v(" "),a("tr",[a("td",[t._v("Select All")]),t._v(" "),a("td",[t._v("⌘A")])]),t._v(" "),a("tr",[a("td",[t._v("Show Diff")]),t._v(" "),a("td",[t._v("⌘D")])]),t._v(" "),a("tr",[a("td",[t._v("Comment with Line Comment")]),t._v(" "),a("td",[t._v("⌘/")])])])]),t._v(" "),a("p",[t._v("覆盖MacOS⌘H快捷键：")]),t._v(" "),a("p",[t._v("系统偏好设置 -> 键盘 -> 快捷键 -> App快捷键 -> 点击加号按钮创建。注意菜单名称要跟 IDEA中原先的一模一样，设置一个不常用的新快捷键：")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:s(431),alt:"idea_key"}}),t._v(" "),a("h2",{attrs:{id:"报错处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#报错处理"}},[t._v("$")]),t._v(" 报错处理")]),t._v(" "),a("h3",{attrs:{id:"test-framework-quit-unexpectedly-错误-找不到或无法加载主类-idea"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-framework-quit-unexpectedly-错误-找不到或无法加载主类-idea"}},[t._v("$")]),t._v(" Test framework quit unexpectedly，错误: 找不到或无法加载主类 IDEA")]),t._v(" "),a("p",[t._v("打开Preferences => Build,Execution,Deployment => Build Tools => Maven  =>  Running Tests，去掉argLine勾选：")]),t._v(" "),a("p",[a("img",{attrs:{src:s(432),alt:"image-20220105194738298"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);